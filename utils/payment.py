from Config import CRYPTO_BOT_TOKEN
# Aiocryptopay - —ç—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Python, –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞—Ö, REST, –±–∏—Ç–∫–æ–π–Ω-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö.
from aiocryptopay import AioCryptoPay


async def get_crypto_bot_sum(summa: float, currency: str):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Å—Ç–∞–Ω—Å AioCryptoPay
    cryptopay = AioCryptoPay(CRYPTO_BOT_TOKEN)

    # get_exchange_rates() –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–º–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç.
    courses = await cryptopay.get_exchange_rates()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ cryptopay, —Ç.–∫ –±–æ–ª—å—à–µ –æ–Ω–∞ –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
    await cryptopay.close()

    # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º –∏ —Å–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    for course in courses:
        if course.source == currency and course.target == 'USD':
            return round(float(summa / course.rate), 2)
        

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
async def check_crypto_bot_invoice(invoice_id: int):
    cryptopay = AioCryptoPay(CRYPTO_BOT_TOKEN)

    # get_invoices –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤-—Ñ–∞–∫—Ç—É—Ä –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    invoice = await cryptopay.get_invoices(invoice_ids=invoice_id)
    await cryptopay.close()

    if invoice.status == 'paid':
        return True

    return False


tariffs = {
    1: {
        'name': 'üê£ –ù–æ–≤–∏—á–æ–∫',
        'count': 10,
        'amount': 250
    },
    2: {
        'name': 'ü•â –ë–∞–∑–æ–≤—ã–π',
        'count': 20,
        'amount': 450
    },
    3: {
        'name': 'ü•à –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
        'count': 30,
        'amount': 650
    },
    4: {
        'name': 'ü•á –¢–∞—Ä–∏—Ñ-Mega',
        'count': 50,
        'amount': 900
    },
    5: {
        'name': 'üéñ –¢–∞—Ä–∏—Ñ-Ultra',
        'count': 100,
        'amount': 1500
    }
}
